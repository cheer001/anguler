## Angular 前端框架学习笔记

##### 快速入门
> 全局安装cli
```
npm install -g @angular/cli
```

> 创建Angular项目
```
ng new projectName
```

> 启动项目
+ `--open` 标志会打开浏览器，并访问 `http://localhost:4200/`
```
ng serve --open
```

> 创建组件
+ `cd cd .\src\app`
```
ng generate component componentName
```


##### 模板语法
+ 插值语法 `{{}}`
+ 列表循环 `*ngFor` 
```
<div *ngFor="let product of products">
	{{product.name}}
</div>
```
+ if指令 `*ngIf`
+ 属性绑定 `[]`
+ 事件绑定是通过把`事件名称`包裹在圆括号 `( )` 中完成的 例：`(click)="share()"`

##### 双向绑定
+ `[(ngModel)]` 是Angularde的双向绑定语法
```
例：
<input id="name" [(ngModel)]="hero.name" placeholder="name" />
```
+ 但是`[(ngModel)]`是属于FormsModule模块下的 默认情况下是不可用的，需要在`app.module.ts`文件中导入FormsModule模块
```
import { FormsModule } from '@angular/forms';
@NgModule({
  ...
  imports: [BrowserModule, FormsModule],
  ...
})
```

##### 属性传递 @Input()
> @Input()表示要从外部接受属性
+ 父组件中 `HeroesComponent`
```
<app-hero-detail [hero]="selectedHero"></app-hero-detail>
```
+ 子组件中 `src/app/hero-detail/hero-detail.component.ts`
```
export class HeroDetailComponent implements OnInit {
 ...
  /** 表示要从外部接受一个hero对象 并且是Hero实体类型 */
  @Input() hero?: Hero;
}

```
  
#### 生命周期
##### ngOnInit() 
+ 作用： 创建组件后会调用这个生命周期方法
+ 场景： 放置初始化逻辑

##### 服务
> `ng generate service hero` 创建服务

+ `@Injectable()` 将类标记为`依赖注入系统`的参与者

+ `@Injectable({procidedIn:'root'})` 用`根注入器`将此服务注册为提供者。
+ 场景： 父组件与祖孙组件传递属性时常用
### 路由部分
##### 添加路由
> `ng generate module app-routing --flat --module=app`
+ --flat	
把这个文件放进了 src/app 中，而不是单独的目录中
+ --module=app	
告诉 CLI 把它注册到 AppModule 的 imports 数组中

##### 路由
> Routes 告诉路由器，当用户单击链接或将 URL 粘贴进浏览器地址栏时要显示哪个视图
+ `path`	
用来匹配浏览器地址栏中 URL 的字符串。
+ `component`	
导航到该路由时，路由器应该创建的组件
```
const routes: Routes = [
  { path: 'heroes', component: HeroesComponent }
];
```

##### RouterModule.forRoot()
> @NgMdule 元数据会初始化路由器，并开始监听浏览器地址的变化
+ forRoot():会在应用的顶层配置这个路由器,该方法会提供路由所需的服务提供者和指令，还会基于浏览器的当前 URL 执行首次导航。
```
/** src/app/app-routing.module.ts */
imports: [ RouterModule.forRoot(routes) ],
```

+ 导出 RouterModule，以便它在整个应用程序中生效。
```
/** src/app/app-routing.module.ts */ 
exports: [ RouterModule ]
```

##### 添加 RouterOutLet
> `<router-outlet>` 会告诉路由器要在哪里显示路由的视图。

##### 添加路由链接 (routerLink)
> `routerLink` 属性的值为 `"/heroes"`，路由器会用它来匹配出指向 `HeroesComponent` 的路由
```
<a routerLink="/heroes">Heroes</a>
```

##### 路由传参
+ `ActivatedRoute` 保存着到这个 HeroDetailComponent 实例的路由信息。这个组件对从 URL 中提取的路由参数感兴趣。其中的 id 参数就是要显示的英雄的 id。

+ `location` 是一个 Angular 的服务，用来与浏览器打交道。 稍后，你就会使用它来导航回上一个视图。
```
constructor(
  private route: ActivatedRoute,
  private heroService: HeroService,
  private location: Location
) {}
```
+ `route.snapshot` 是一个路由信息的静态快照，抓取自组件刚刚创建完毕之后
+ `paramMap` 是一个从 URL 中提取的路由参数值的字典。"id" 对应的值就是要获取的英雄的 id。
```
getHero(): void {
    const id = Number(this.route.snapshot.paramMap.get('id'));
    this,
      this.heroService.getHeroe(id).subscribe((hero) => (this.hero = hero));
  }
```


#### 从服务端获取数据
##### 启用HTTP服务
1. src/app/app.module.ts
```
import { HttpClientModule } from '@angular/common/http';
```
2. 把 HttpClientModule 添加到 imports 数组中
```
/** src/app/app.module.ts */
@NgModule({
  imports: [
    HttpClientModule,
  ],
})
```

##### 模拟数据服务器
>  内存 ` API（In-memory Web API）` 模拟出的远程数据服务器通讯。
```
npm install angular-in-memory-web-api --save
```

+ 在 AppModule 中，导入 HttpClientInMemoryWebApiModule 和 InMemoryDataService 类
```
/** src/app/app.module.ts */
import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';
import { InMemoryDataService } from './in-memory-data.service';
```
+ 将 HttpClientInMemoryWebApiModule 添加到 AppModule 的 imports 数组中，并以 InMemoryDataService 为参数对其进行配置

```
/** src/app/app.module.ts */
HttpClientModule,
HttpClientInMemoryWebApiModule.forRoot(
  InMemoryDataService, { dataEncapsulation: false }
)
```
> forRoot() 配置方法接收一个 InMemoryDataService 类来初始化内存数据库。
> 生成类 `src/app/in-memory-data.service.ts`
```
ng generate service InMemoryData
```


##### 错误处理


##### AsyncPipe
> $ 是一个约定，表示 heroes$ 是一个 Observable 而不是数组
```
<li *ngFor="let hero of heroes$ | async" >
```
+ *ngFor 不能直接使用 Observable，所以要使用一个管道字符（|），后面紧跟着一个 async。这表示 Angular 的 AsyncPipe 管道，它会自动订阅 Observable，这样你就不用在组件类中这么做了


##### RxJs中的操作符
+ 在传出最终字符串之前，debounceTime(300) 将会等待，直到新增字符串的事件暂停了
+ distinctUntilChanged() 会确保只在过滤条件变化时才发送请求。
+ switchMap() 会为每个从 debounce() 和 distinctUntilChanged() 中通过的搜索词调用搜索服务。它会取消并丢弃以前的搜索可观察对象，只保留最近的。